<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Blogs on dyuji.dev</title><link>https://dyuji.dev/blog/</link><description>Recent content in Blogs on dyuji.dev</description><generator>Hugo -- 0.140.2</generator><language>ja</language><lastBuildDate>Sat, 08 Jul 2023 19:44:33 +0900</lastBuildDate><atom:link href="https://dyuji.dev/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Go_prog_forkwell_27</title><link>https://dyuji.dev/blog/memo/2023_0708_go_prog_forkwell27/</link><pubDate>Sat, 08 Jul 2023 19:44:33 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2023_0708_go_prog_forkwell27/</guid><description>&lt;h1 id="go言語プログラミングエッセンス---forkwell-library27">Go言語プログラミングエッセンス - Forkwell Library#27&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://forkwell.connpass.com/event/288035/">イベント内容&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://t.co/Iz5nswgxtz">動画アーカイブ&lt;/a>&lt;/li>
&lt;li>モデレーター &lt;a href="https://twitter.com/shibu_jp">渋川さん&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="go-言語で楽しくなるシステム開発">Go 言語で楽しくなるシステム開発&lt;/h2>
&lt;h3 id="自己紹介">自己紹介&lt;/h3>
&lt;ul>
&lt;li>&lt;a href="https://twitter.com/mattn_jp">mattn&lt;/a>さん
&lt;ul>
&lt;li>Go言語プログラミングエッセンス著者&lt;/li>
&lt;li>Google open source expert&lt;/li>
&lt;li>Go歴 13年&lt;/li>
&lt;li>Software Design
&lt;ul>
&lt;li>nostrの連載&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="概要">概要&lt;/h3>
&lt;ul>
&lt;li>簡単な説明&lt;/li>
&lt;li>特徴&lt;/li>
&lt;li>Explicit is better than implicit&lt;/li>
&lt;li>非同期プログラミング&lt;/li>
&lt;li>最新のGo&lt;/li>
&lt;/ul>
&lt;h3 id="goについて">Goについて&lt;/h3>
&lt;ul>
&lt;li>C言語の構文を意識しつつ、簡単な文法でコーディングできる&lt;/li>
&lt;li>すでにいろんな会社で利用&lt;/li>
&lt;li>プログラミング環境を改善する目的
&lt;ul>
&lt;li>C言語を設計した世界的エンジニアで知られる人が関わっている&lt;/li>
&lt;li>Unixらしさ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>使用例
&lt;ul>
&lt;li>CLI&lt;/li>
&lt;li>Webサーバー&lt;/li>
&lt;li>バックエンド&lt;/li>
&lt;li>広告配信&lt;/li>
&lt;li>ハードウェア制御&lt;/li>
&lt;li>機械学習&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="特徴">特徴&lt;/h3>
&lt;ul>
&lt;li>静的型付けコンパイル言語&lt;/li>
&lt;li>スタティックバイナリ&lt;/li>
&lt;li>C言語風でありながら、GC&lt;/li>
&lt;li>非同期を簡単に扱えるランタイム&lt;/li>
&lt;/ul>
&lt;h3 id="explicit-is-better-than-implicit">Explicit is better than implicit&lt;/h3>
&lt;ul>
&lt;li>曖昧より明確のほうがいいよね&lt;/li>
&lt;li>RobPike氏が良く言うこと&lt;/li>
&lt;li>ex) error ハンドリング&lt;/li>
&lt;li>Goは例外を扱わない&lt;/li>
&lt;li>result typeを扱わない&lt;/li>
&lt;li>errorが返ってきたら処理する&lt;/li>
&lt;li>Goでバグを生み出さないコツ
&lt;ul>
&lt;li>すべてのerrorを明示的に対処し暗黙をなくす
&lt;ul>
&lt;li>deferをうまく使うことでエラーを減らす&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>errorを受け取ったら、処理を中断し、呼び出し元へ返す&lt;/li>
&lt;li>→必然的にearly return&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Goが優先したもの
&lt;ul>
&lt;li>読みやすさ
&lt;ul>
&lt;li>声に出して読めるくらい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>学びやすさ&lt;/li>
&lt;li>開発者が明示的に処理を中断させる&lt;/li>
&lt;li>予約語を増やさない
&lt;ul>
&lt;li>複雑さを減らす&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>開発者が意思決定するプログラミング&lt;/li>
&lt;/ul>
&lt;h3 id="非同期プログラミングの良さ">非同期プログラミングの良さ&lt;/h3>
&lt;ul>
&lt;li>ハードウェアが高性能化&lt;/li>
&lt;li>非同期は難しい&lt;/li>
&lt;li>Goの仕組み
&lt;ul>
&lt;li>goroutine&lt;/li>
&lt;li>channel
&lt;ul>
&lt;li>リレーのバトンのようなもの&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>気をつけること
&lt;ul>
&lt;li>並列と並行は違う&lt;/li>
&lt;li>スレッドを増やすプログラミング言語
&lt;ul>
&lt;li>CPUコアに固定されない。空いたコアが次を担当する
&lt;ul>
&lt;li>CPUコアを有効に活用する&lt;/li>
&lt;li>C言語でやると難しい
&lt;ul>
&lt;li>コンテキストスイッチのコストが発生してしまう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Goのスレッドは軽量なので、多く使っても大丈夫&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スケールに対応しやすいのでクラウド向き&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="go-121でくるもの">go 1.21でくるもの&lt;/h3>
&lt;ul>
&lt;li>min/max
&lt;ul>
&lt;li>数値、文字列など&lt;/li>
&lt;li>実装するとinterface{}をつかうとコンパイルで気づけない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>clear
&lt;ul>
&lt;li>mapやスライスを空にできる
&lt;ul>
&lt;li>スライスの長さが変わらない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>配列はできない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>loopvar
&lt;ul>
&lt;li>まだ仮
&lt;ul>
&lt;li>検証中&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>並列で動かすときに、ループ変数が回り終わった状態で参照していしまうのの対処&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>pgo
&lt;ul>
&lt;li>コンパイラによるプロファイルベースの最適化&lt;/li>
&lt;li>pprofの結果からホットパスをインライン化する
&lt;ul>
&lt;li>pprofの結果を読み込んでbuildすると最適化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>slog
&lt;ul>
&lt;li>構造化ログを出力できるように&lt;/li>
&lt;li>ログレベルも設定&lt;/li>
&lt;li>スレッドセーフ&lt;/li>
&lt;li>出力先変更可能&lt;/li>
&lt;li>グルーピング&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>maps
&lt;ul>
&lt;li>型パラメータを使ったmap操作関数&lt;/li>
&lt;li>genericsができたので&lt;/li>
&lt;li>key一覧、value一覧をとることができる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Slices
&lt;ul>
&lt;li>slice処理をかける&lt;/li>
&lt;li>delete, insert, reverse, binarySearch, contains&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>wasi
&lt;ul>
&lt;li>wasmの実行環境がブラウザ依存だった&lt;/li>
&lt;li>wasmを読み込んでgoで直感的にできるように
&lt;ul>
&lt;li>標準ライブラリにほぼ対応&lt;/li>
&lt;li>利用できない/システムコールが必要なおの
&lt;ul>
&lt;li>net/http&lt;/li>
&lt;li>os&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>エッジコンピューティングがしやすくなる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>(youtubeアンケート、職務内容)&lt;/p></description></item><item><title>AWS Tech talk Night#5</title><link>https://dyuji.dev/blog/memo/2023_0125_aws_tech_talk_night_5/</link><pubDate>Wed, 25 Jan 2023 19:00:47 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2023_0125_aws_tech_talk_night_5/</guid><description>&lt;h1 id="aws-tech-talk-night5-クラウドネイティブ時代のエンジニアが押さえておきたい-ソフトウェアの構築運用で考慮すべき5つのポイント-awsプリンシパルエンジニアの技術記事をソリューションアーキテクトが解説">AWS Tech talk Night#5 クラウドネイティブ時代のエンジニアが押さえておきたい ソフトウェアの構築・運用で考慮すべき5つのポイント &lt;del>AWSプリンシパルエンジニアの技術記事をソリューションアーキテクトが解説&lt;/del>&lt;/h1>
&lt;ul>
&lt;li>1/25にZoomウェビナーで実施された、AWSのイベント&lt;/li>
&lt;li>&lt;a href="https://techplay.jp/event/885662?utm_source=eventRemind&amp;amp;utm_medium=email&amp;amp;utm_campaign=tp_20230124">イベントURL&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="概要">概要&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>AWS Japan 千葉さん&lt;/p></description></item><item><title>実用Go言語 Forkwell Library #7</title><link>https://dyuji.dev/blog/memo/2022_1026_forkwell_library7/</link><pubDate>Wed, 26 Oct 2022 19:56:43 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2022_1026_forkwell_library7/</guid><description>&lt;h1 id="実用go言語-forkwell-library-7">実用Go言語 Forkwell Library #7&lt;/h1>
&lt;h2 id="基調講演">基調講演&lt;/h2>
&lt;p>&lt;a href="https://twitter.com/search?q=%23Forkwell_Library&amp;amp;src=typed_query&amp;amp;f=live">#Forkwell_Library&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;p>3人の著者による発表&lt;/p>
&lt;/li>
&lt;li>
&lt;p>渋川さん&lt;/p>
&lt;ul>
&lt;li>Honda&lt;/li>
&lt;li>DeNA&lt;/li>
&lt;li>FutureArchitect&lt;/li>
&lt;li>趣味 インラインスケート&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>辻さん&lt;/p>
&lt;ul>
&lt;li>渋谷区の公務員からフューチャー&lt;/li>
&lt;li>趣味 競技プログラミング、筋トレ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>真野さん&lt;/p>
&lt;ul>
&lt;li>新卒でフューチャーで13年くらい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>フューチャーのかるい紹介&lt;/p></description></item><item><title>Docker×Goのマルチステージビルドで必要になるcgoのオプションについて</title><link>https://dyuji.dev/blog/memo/2022_0504_cgo/</link><pubDate>Wed, 04 May 2022 23:51:56 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2022_0504_cgo/</guid><description>&lt;h2 id="dockergoのマルチステージビルドで必要になるcgoのオプションについて">Docker×Goのマルチステージビルドで必要になるcgoのオプションについて&lt;/h2>
&lt;h3 id="背景">背景&lt;/h3>
&lt;ul>
&lt;li>Dockerfileでマルチステージビルドの構築をしていたが、DockerImageのビルドに成功するも、docker runでエラーが出て動かなかった&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-dockerfile" data-lang="dockerfile">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> golang:1.18 as builder&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /go/src/&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> . ./&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go mod download&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> go build -v -o server ./cmd&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">FROM&lt;/span>&lt;span style="color:#e6db74"> alpine:latest&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">RUN&lt;/span> apk --no-cache add ca-certificates&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">WORKDIR&lt;/span>&lt;span style="color:#e6db74"> /root/&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">COPY&lt;/span> --from&lt;span style="color:#f92672">=&lt;/span>builder /go/src/server ./&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">EXPOSE&lt;/span>&lt;span style="color:#e6db74"> 8080&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#960050;background-color:#1e0010">&lt;/span>&lt;span style="color:#66d9ef">CMD&lt;/span> [&lt;span style="color:#e6db74">&amp;#34;./server&amp;#34;&lt;/span>]&lt;span style="color:#960050;background-color:#1e0010">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>エラーメッセージ&lt;/p></description></item><item><title>Fabric_subprocess</title><link>https://dyuji.dev/blog/memo/2022_0303_fabric_subprocess/</link><pubDate>Thu, 03 Mar 2022 01:45:02 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2022_0303_fabric_subprocess/</guid><description>&lt;h2 id="python2で使うfabricとsubprocessはエラーハンドリングに気をつける">Python2で使うfabricとsubprocessはエラーハンドリングに気をつける&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>&lt;a href="https://fabric-ja.readthedocs.io/ja/latest/tutorial.html">Fabric&lt;/a>は、アプリケーションのデプロイやシステム管理のタスクのためにSSHの利用を簡素化するためのPython2系のライブラリとコマンドラインのツール&lt;/p>
&lt;/li>
&lt;li>
&lt;p>fab {method}でコマンドラインスクリプトで呼び出しができる&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Pythonの&lt;a href="https://docs.python.org/ja/3/library/subprocess.html">subprocess&lt;/a>はサブプロセスを起動するためのモジュール。python内からコマンド実行するのに使う&lt;/p>
&lt;/li>
&lt;li>
&lt;p>この2つの組み合わせでのエラーハンドリングには気をつける&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>fab_test.py&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-py" data-lang="py">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">from&lt;/span> fabric.api &lt;span style="color:#f92672">import&lt;/span> local
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">hello&lt;/span>():
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> local(&lt;span style="color:#e6db74">&amp;#34;exit 1&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>cmd.py&lt;/p></description></item><item><title>Grpc</title><link>https://dyuji.dev/blog/memo/2021_1230_grpc/</link><pubDate>Thu, 30 Dec 2021 11:14:06 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1230_grpc/</guid><description>&lt;ul>
&lt;li>
&lt;p>grpcチュートリアルメモ&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/ymmt2005/grpc-tutorial">https://github.com/ymmt2005/grpc-tutorial&lt;/a>&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Remote Procedure Call&lt;/p>
&lt;ul>
&lt;li>リモートで呼び出しする手順&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>gRPC&lt;/p>
&lt;ul>
&lt;li>Googleで開発された多言語間のRPCを実現するプロトコル&lt;/li>
&lt;li>多言語対応であることが特徴&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>IDL(interface definition language)&lt;/p></description></item><item><title>Jmeter Hash</title><link>https://dyuji.dev/blog/memo/2021_1228_jmeter_hash/</link><pubDate>Tue, 28 Dec 2021 23:46:09 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1228_jmeter_hash/</guid><description>&lt;ul>
&lt;li>JMeterのシナリオで変数をHash化する時はBeanShell PreProcesserを使う&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-java" data-lang="java">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> java.security.MessageDigest;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String token &lt;span style="color:#f92672">=&lt;/span> vars.&lt;span style="color:#a6e22e">get&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;token&amp;#34;&lt;/span>); &lt;span style="color:#75715e">// Jmeterの変数を取得&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String api_key &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;hogehuga&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String encrypt_str &lt;span style="color:#f92672">=&lt;/span> token&lt;span style="color:#f92672">+&lt;/span>api_key;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>MessageDigest digest &lt;span style="color:#f92672">=&lt;/span> MessageDigest.&lt;span style="color:#a6e22e">getInstance&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;SHA-256&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">byte&lt;/span>&lt;span style="color:#f92672">[]&lt;/span> hash &lt;span style="color:#f92672">=&lt;/span> digest.&lt;span style="color:#a6e22e">digest&lt;/span>(encrypt_str.&lt;span style="color:#a6e22e">getBytes&lt;/span>());
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>StringBuilder sb &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">new&lt;/span> StringBuilder(2&lt;span style="color:#f92672">*&lt;/span>hash.&lt;span style="color:#a6e22e">length&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">for&lt;/span> (&lt;span style="color:#66d9ef">byte&lt;/span> b: hash) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String hexStr &lt;span style="color:#f92672">=&lt;/span> Integer.&lt;span style="color:#a6e22e">toHexString&lt;/span>(b).&lt;span style="color:#a6e22e">replaceAll&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ffffff&amp;#34;&lt;/span>,&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> String hex &lt;span style="color:#f92672">=&lt;/span> (hexStr.&lt;span style="color:#a6e22e">length&lt;/span>() &lt;span style="color:#f92672">==&lt;/span> 1) &lt;span style="color:#f92672">?&lt;/span> &lt;span style="color:#e6db74">&amp;#34;0&amp;#34;&lt;/span> &lt;span style="color:#f92672">+&lt;/span> hexStr : hexStr;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> sb.&lt;span style="color:#a6e22e">append&lt;/span>(hex);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>String newVariable &lt;span style="color:#f92672">=&lt;/span> sb.&lt;span style="color:#a6e22e">toString&lt;/span>();
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>var.&lt;span style="color:#a6e22e">put&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;ENCRYPTED_TOKEN&amp;#34;&lt;/span>,newVariable); &lt;span style="color:#75715e">// Jmeterの変数にセット&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>「超」入門 失敗の本質</title><link>https://dyuji.dev/blog/memo/2021_1226_essence_of_failure/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_essence_of_failure/</guid><description>&lt;ul>
&lt;li>大きな戦略における目標に寄与しない無駄な目標を実施しない
&lt;ul>
&lt;li>勝利の条件を理解するのは優れたリーダーに必要なこと&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>戦略の成功を図る指標をアップデートする
&lt;ul>
&lt;li>既存の指標の発見&lt;/li>
&lt;li>敵対する指標の無効化&lt;/li>
&lt;li>新たな指標で戦う戦う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>成功体験を分析する。経験知を汎用的な指標にする&lt;/li>
&lt;li>新しいルールをつくる
&lt;ul>
&lt;li>人・組織の柔軟な活用&lt;/li>
&lt;li>新技術の開発&lt;/li>
&lt;li>技術の運用方法&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ダブルループ学習を心掛ける
&lt;ul>
&lt;li>シングルループ学習
&lt;ul>
&lt;li>目標と問題構造を所与ないし一定とした上で最適解を探す&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ダブルループ学習
&lt;ul>
&lt;li>想定した目標と問題自体が間違っているという疑問・検討を含めた学習&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>現場と上層部の乖離を避ける
&lt;ul>
&lt;li>専門分野は専門家の知識をあげられるように&lt;/li>
&lt;li>リーダーが前線で直接確認することで、情報の正確さと問題解決の速度を上げる&lt;/li>
&lt;li>リーダーは見たくない問題を解決する覚悟の強さが要求される&lt;/li>
&lt;li>正しい警告を無視しない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>評価制度は組織に対するメッセージ&lt;/li>
&lt;li>居心地の良い安定にならず変化できる組織
&lt;ul>
&lt;li>異質な情報・知識の交流&lt;/li>
&lt;li>権力構造の均衡破壊&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>万が一の想定を持っておく&lt;/li>
&lt;/ul></description></item><item><title>5G</title><link>https://dyuji.dev/blog/memo/2021_1226_5g/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_5g/</guid><description>&lt;p>&lt;a href="https://www.amazon.co.jp/dp/B08CDN21X7/">5G 大容量・低遅延・多接続のしくみ&lt;/a>
感想：5Gの普及でより情報量の多いコンテンツの配信等ができるようになるのは間違いない。今まで有線のPCでしか出来なかったことがスマホ端末でもできるようになっていくと思われるが、消費者的に一番恩恵を受けるのはゲームの分野かと思った。&lt;/p></description></item><item><title>dockerからlocalhostに接続</title><link>https://dyuji.dev/blog/memo/2021_1226_docker_localhost/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_docker_localhost/</guid><description>&lt;p>&lt;a href="https://qiita.com/Asayu123/items/ccfe4ccfc417ce57f445">Docker for Mac上のコンテナから、Mac上のアプリケーションに簡単に接続する方法&lt;/a>&lt;/p>
&lt;ul>
&lt;li>Mysqlに接続する例 DSN&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>user1:password@tcp(docker.for.mac.localhost)/database_name
&lt;/code>&lt;/pre></description></item><item><title>echoとbase64</title><link>https://dyuji.dev/blog/memo/2021_1226_echo_base64/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_echo_base64/</guid><description>&lt;ul>
&lt;li>echoコマンドはデフォルトでは改行文字が含まれるため、暗号化時などに気をつける
&lt;ul>
&lt;li>これが原因でmysqlのdsnでエラーが発生した&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>改行なしオプションは-n&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>例&lt;/strong>&lt;/p></description></item><item><title>go testをDockerfileで実施する</title><link>https://dyuji.dev/blog/memo/2021_1226_gotest_and_docker/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_gotest_and_docker/</guid><description>&lt;ul>
&lt;li>gorm v2がgo v1.14以降じゃないとビルドできない&lt;/li>
&lt;li>Jenkinsサーバーがgo v1.12でgo testのときにエラーがでる&lt;/li>
&lt;li>docker imageのビルドの時にgo imageでgo testがしたいができるのか?
&lt;ul>
&lt;li>テストが落ちたらビルドも止まるか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="試作コード">試作コード&lt;/h3>
&lt;p>&lt;strong>cmd/main.go&lt;/strong>&lt;/p></description></item><item><title>Golang memo</title><link>https://dyuji.dev/blog/memo/2021_1226_golang/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_golang/</guid><description>&lt;h1 id="golang-memo">Golang memo&lt;/h1>
&lt;h2 id="他の言語からすると紛らわしい単語">他の言語からすると紛らわしい単語&lt;/h2>
&lt;ul>
&lt;li>map
&lt;ul>
&lt;li>Goでは辞書型&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>interface&lt;/li>
&lt;/ul>
&lt;h2 id="go">go&lt;/h2>
&lt;ul>
&lt;li>環境変数の場所を間違えない&lt;/li>
&lt;li>基本wslで書いて検証したとしても、vscodeの補完に使うgoのライブラリたちはwindows本体側を参照しているのでちゃんと設定する&lt;/li>
&lt;/ul>
&lt;h2 id="switch-と-select">switch と select&lt;/h2>
&lt;p>見た目が似てるけど、違う用途&lt;/p></description></item><item><title>iotaとエラーハンドリング</title><link>https://dyuji.dev/blog/memo/2021_1226_iota_and_error/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_iota_and_error/</guid><description>&lt;ul>
&lt;li>
&lt;p>&lt;a href="jwt.md">jwtのエラー&lt;/a>を調べている時に以下のコードを見て不思議に思った&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;a href="https://github.com/dgrijalva/jwt-go/blob/master/claims.go#L38-L52">dgrijalva/jwt-go/claims.go#L38-L52&lt;/a>&lt;/p>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">VerifyExpiresAt&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">delta&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>).&lt;span style="color:#a6e22e">Sub&lt;/span>(&lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Unix&lt;/span>(&lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">ExpiresAt&lt;/span>, &lt;span style="color:#ae81ff">0&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vErr&lt;/span>.&lt;span style="color:#a6e22e">Inner&lt;/span> = &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;token is expired by %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">delta&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vErr&lt;/span>.&lt;span style="color:#a6e22e">Errors&lt;/span> &lt;span style="color:#f92672">|=&lt;/span> &lt;span style="color:#a6e22e">ValidationErrorExpired&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">VerifyIssuedAt&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vErr&lt;/span>.&lt;span style="color:#a6e22e">Inner&lt;/span> = &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Token used before issued&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vErr&lt;/span>.&lt;span style="color:#a6e22e">Errors&lt;/span> &lt;span style="color:#f92672">|=&lt;/span> &lt;span style="color:#a6e22e">ValidationErrorIssuedAt&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">c&lt;/span>.&lt;span style="color:#a6e22e">VerifyNotBefore&lt;/span>(&lt;span style="color:#a6e22e">now&lt;/span>, &lt;span style="color:#66d9ef">false&lt;/span>) &lt;span style="color:#f92672">==&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vErr&lt;/span>.&lt;span style="color:#a6e22e">Inner&lt;/span> = &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;token is not valid yet&amp;#34;&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">vErr&lt;/span>.&lt;span style="color:#a6e22e">Errors&lt;/span> &lt;span style="color:#f92672">|=&lt;/span> &lt;span style="color:#a6e22e">ValidationErrorNotValidYet&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;ul>
&lt;li>
&lt;p>goで&lt;code>|=&lt;/code>はOR演算子を表すが、エラーでなんでOR演算子を使うのか？&lt;/p></description></item><item><title>jwtの"Token used before issued" Error</title><link>https://dyuji.dev/blog/memo/2021_1226_jwt/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_jwt/</guid><description>&lt;ul>
&lt;li>Token used before issued はjwtのParseの時iatが現在時刻より未来の場合発生する&lt;/li>
&lt;li>サーバー間の時刻のずれでも発生するので注意する&lt;/li>
&lt;li>Parseはerrorがnilでない時もtokenを返すので、後処理はできる&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;github.com/dgrijalva/jwt-go&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// iatが2030年になっている
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">tokenstring&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxOTE2MjM5MDIyfQ.jHQiBm09vEVjEx9347u2hU7LTreUVtEbWRPWrr9DG_A&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">secret&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;my_secret_token&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">tokenParse&lt;/span>(&lt;span style="color:#a6e22e">tokenstring&lt;/span>, []byte(&lt;span style="color:#a6e22e">secret&lt;/span>))
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">!=&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Printf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;Error:%v\n&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">claims&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">token&lt;/span>.&lt;span style="color:#a6e22e">Claims&lt;/span>.(&lt;span style="color:#a6e22e">jwt&lt;/span>.&lt;span style="color:#a6e22e">MapClaims&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">claims&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">claims&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">tokenParse&lt;/span>(&lt;span style="color:#a6e22e">idToken&lt;/span> &lt;span style="color:#66d9ef">string&lt;/span>, &lt;span style="color:#a6e22e">hmacSecret&lt;/span> []&lt;span style="color:#66d9ef">byte&lt;/span>) (&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">jwt&lt;/span>.&lt;span style="color:#a6e22e">Token&lt;/span>, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">token&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">jwt&lt;/span>.&lt;span style="color:#a6e22e">Parse&lt;/span>(&lt;span style="color:#a6e22e">idToken&lt;/span>, &lt;span style="color:#66d9ef">func&lt;/span>(&lt;span style="color:#a6e22e">token&lt;/span> &lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">jwt&lt;/span>.&lt;span style="color:#a6e22e">Token&lt;/span>) (&lt;span style="color:#66d9ef">interface&lt;/span>{}, &lt;span style="color:#66d9ef">error&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#75715e">// アルゴリズムの判定
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#66d9ef">if&lt;/span> &lt;span style="color:#a6e22e">_&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#a6e22e">token&lt;/span>.&lt;span style="color:#a6e22e">Method&lt;/span>.(&lt;span style="color:#f92672">*&lt;/span>&lt;span style="color:#a6e22e">jwt&lt;/span>.&lt;span style="color:#a6e22e">SigningMethodHMAC&lt;/span>); !&lt;span style="color:#a6e22e">ok&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#66d9ef">nil&lt;/span>, &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Errorf&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;unexpected signing method: %v&amp;#34;&lt;/span>, &lt;span style="color:#a6e22e">token&lt;/span>.&lt;span style="color:#a6e22e">Header&lt;/span>[&lt;span style="color:#e6db74">&amp;#34;alg&amp;#34;&lt;/span>])
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">hmacSecret&lt;/span>, &lt;span style="color:#66d9ef">nil&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> })
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">token&lt;/span>, &lt;span style="color:#a6e22e">err&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div></description></item><item><title>mysqlのkey index</title><link>https://dyuji.dev/blog/memo/2021_1226_mysql_key_index/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_mysql_key_index/</guid><description>&lt;ul>
&lt;li>describeはテーブル情報を出すが、複合キーの場合keyのカラムが1つのみmulになる&lt;/li>
&lt;li>indexを全て確認する際はshow indexを使う&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">describe&lt;/span> &lt;span style="color:#66d9ef">table_name&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sql" data-lang="sql">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">show&lt;/span> &lt;span style="color:#66d9ef">index&lt;/span> &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#66d9ef">table_name&lt;/span>;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>例&lt;/p></description></item><item><title>Terraform 勉強</title><link>https://dyuji.dev/blog/memo/2021_1226_gcp_tutorial_memo/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_gcp_tutorial_memo/</guid><description>&lt;h1 id="terraform-勉強">Terraform 勉強&lt;/h1>
&lt;h2 id="introduction-to-infrastructure-as-code-with-terraform">Introduction to Infrastructure as Code with Terraform&lt;/h2>
&lt;ul>
&lt;li>
&lt;p>Infrastructure as Code(IaC)&lt;/p>
&lt;/li>
&lt;li>
&lt;p>Terraformはproviderと呼ばれるTerraformプラグインでAPIを呼び出し、インフラの操作をする&lt;/p>
&lt;ul>
&lt;li>AWS GCP Azureなど有名なもののproviderは作成されている&lt;/li>
&lt;li>独自でproviderを作成することも可能&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>providerがインフラの要素をresourceとして定義&lt;/p></description></item><item><title>time</title><link>https://dyuji.dev/blog/memo/2021_1226_time/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_time/</guid><description>&lt;h1 id="time">time&lt;/h1>
&lt;ul>
&lt;li>timeパッケージはデフォルトがmsなので注意する&lt;/li>
&lt;/ul></description></item><item><title>URL Encode</title><link>https://dyuji.dev/blog/memo/2021_1226_urlencode/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_urlencode/</guid><description>&lt;ul>
&lt;li>net/urlパッケージのURLエンコードは2種類&lt;/li>
&lt;li>url.QueryEscape()
&lt;ul>
&lt;li>スペースが+になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>url.PathEscape()
&lt;ul>
&lt;li>スペースが%20になる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://text.baldanders.info/golang/uri-encoding/">こちらに詳しい URI エンコーディングについて&lt;/a>&lt;/p>
&lt;ul>
&lt;li>url.EncodeではQueryEscapeの方が使われているため、URLの+を変換したいときは正規表現を用いる&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://cipepser.hatenablog.com/entry/2017/07/29/083729">こちらに詳しい&lt;/a>&lt;/p></description></item><item><title>WIP スタートアップ企業の業績決定要因 -質的比較分析(QCA)によるアプローチ</title><link>https://dyuji.dev/blog/memo/2021_1226_start_up/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_start_up/</guid><description>&lt;p>&lt;a href="https://www.jstage.jst.go.jp/article/keieijournal/42/0/42_40/_article/-char/ja/">https://www.jstage.jst.go.jp/article/keieijournal/42/0/42_40/_article/-char/ja/&lt;/a>
2019 年 42 巻 p. 40-51&lt;/p>
&lt;ul>
&lt;li>中小企業の業績に影響を与える要因
&lt;ul>
&lt;li>企業家の特性&lt;/li>
&lt;li>リーダーシップ&lt;/li>
&lt;li>経営資源&lt;/li>
&lt;li>戦略&lt;/li>
&lt;li>社会的関係資本&lt;/li>
&lt;li>創業者の年齢&lt;/li>
&lt;li>成長指向&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>開業から28カ月以内のスタートアップ&lt;/p></description></item><item><title>チャネルの受信とClose</title><link>https://dyuji.dev/blog/memo/2022_1226_channel_receive/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2022_1226_channel_receive/</guid><description>&lt;ul>
&lt;li>チャネルはCloseしたら0値を返すので、受信側がCloseかどうかは第二引数をとって判別する&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">package&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">import&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;fmt&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#e6db74">&amp;#34;time&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>) {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">select&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">case&lt;/span> &lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span>&lt;span style="color:#a6e22e">ch&lt;/span>:
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">fmt&lt;/span>.&lt;span style="color:#a6e22e">Println&lt;/span>(&lt;span style="color:#a6e22e">v&lt;/span>, &lt;span style="color:#a6e22e">ok&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">func&lt;/span> &lt;span style="color:#a6e22e">main&lt;/span>() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> make(&lt;span style="color:#66d9ef">chan&lt;/span> &lt;span style="color:#66d9ef">int&lt;/span>, &lt;span style="color:#ae81ff">10&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">go&lt;/span> &lt;span style="color:#a6e22e">A&lt;/span>(&lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">for&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">:=&lt;/span> &lt;span style="color:#ae81ff">1&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span> &lt;span style="color:#f92672">&amp;lt;=&lt;/span> &lt;span style="color:#ae81ff">5&lt;/span>; &lt;span style="color:#a6e22e">i&lt;/span>&lt;span style="color:#f92672">++&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">ch&lt;/span> &lt;span style="color:#f92672">&amp;lt;-&lt;/span> &lt;span style="color:#a6e22e">i&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> close(&lt;span style="color:#a6e22e">ch&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Sleep&lt;/span>(&lt;span style="color:#ae81ff">100&lt;/span> &lt;span style="color:#f92672">*&lt;/span> &lt;span style="color:#a6e22e">time&lt;/span>.&lt;span style="color:#a6e22e">Microsecond&lt;/span>)
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>}
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>結果&lt;/p></description></item><item><title>デバッグ</title><link>https://dyuji.dev/blog/memo/2021_1226_debug/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_debug/</guid><description>&lt;ul>
&lt;li>変更でエラーが発生するようになった時は正しく動いていたversionまで遡ってみる&lt;/li>
&lt;li>大きな変更に注意する
&lt;ul>
&lt;li>ライブラリのメジャーバージョンアップ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>変更の履歴をちゃんと残す&lt;/li>
&lt;/ul></description></item><item><title>価値観をアップデートしていくにはどうするべきか(仮)</title><link>https://dyuji.dev/blog/memo/2021_1226_update_values/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_update_values/</guid><description>&lt;h2 id="価値観をアップデートしていくにはどうするべきか仮">価値観をアップデートしていくにはどうするべきか(仮)&lt;/h2>
&lt;ul>
&lt;li>軸を増やす&lt;/li>
&lt;li>未知の体験&lt;/li>
&lt;li>サンプリングを変える&lt;/li>
&lt;/ul></description></item><item><title>外国語学習に成功する人，しない人 第二言語習得論への招待</title><link>https://dyuji.dev/blog/memo/2021_1226_foreign_language/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_foreign_language/</guid><description>&lt;p>from &lt;a href="https://www.iwanami.co.jp/book/b265858.html">外国語学習に成功する人，しない人 第二言語習得論への招待&lt;/a>&lt;/p>
&lt;ul>
&lt;li>インプット
&lt;ul>
&lt;li>背景知識がある題材を選ぶと良い&lt;/li>
&lt;li>リスニングは80％くらいわかる教材を何度も聞く方がよい&lt;/li>
&lt;li>リスニングのスクリプトを読んで理解してから再度聞いてみる&lt;/li>
&lt;li>外国語で情報を収集する&lt;/li>
&lt;li>ほとんどわからないものでも、聞かないより聞いた方がいい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>アウトプット
&lt;ul>
&lt;li>アウトプット(話すこと、書くこと)は、毎日少しづつでもやる&lt;/li>
&lt;li>話す練習はまずは意味を通じさせること、次に正しい文を意識する&lt;/li>
&lt;li>話すときにコミュニケーションストラテジー(間の語)を話して時間を稼ぐ&lt;/li>
&lt;li>言いたい単語が思いつかない時は別の簡単な表現で言い換える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>単語の学習
&lt;ul>
&lt;li>文脈の中で覚える&lt;/li>
&lt;li>丸暗記はなるべく避ける&lt;/li>
&lt;li>知らない単語はなるべく推測する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>発音・音声
&lt;ul>
&lt;li>難しい発音は意識しておき(lとrなど)、意識すればできるようにする&lt;/li>
&lt;li>意味文法などを理解している文の音声をできるだけ正確に真似て練習する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>文法
&lt;ul>
&lt;li>基本的なものを文をつくりアウトプットできるレベルに&lt;/li>
&lt;li>説明を読んでも分からないものは無視&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>動機付け
&lt;ul>
&lt;li>高める工夫する
&lt;ul>
&lt;li>授業をとる、仲間とやる、好きな内容を使う、資格を受ける、外国語のことに興味を持つ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>図解 モチベーション大百科</title><link>https://dyuji.dev/blog/memo/2021_1226_motivation/</link><pubDate>Sun, 26 Dec 2021 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2021_1226_motivation/</guid><description>&lt;h2 id="目標設定のコツ">目標設定のコツ&lt;/h2>
&lt;p>&lt;a href="https://www.amazon.co.jp/dp/B0748CWPVS">図解 モチベーション大百科&lt;/a>より&lt;/p>
&lt;ul>
&lt;li>目標を具体的な数値に変える
&lt;ul>
&lt;li>数値にする(割合、時刻など)&lt;/li>
&lt;li>最大値、最小値の範囲で予測する&lt;/li>
&lt;li>多めに目標を持つ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>期待をもって行動する
&lt;ul>
&lt;li>運が良いと思う&lt;/li>
&lt;li>学べることがあると思い行動する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>締め切りは細かく区切る
&lt;ul>
&lt;li>タスクを分解する&lt;/li>
&lt;li>締め切りをつける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>行動する理由を考えるより、行動のための手順を書く
&lt;ul>
&lt;li>やることを書き出すのと、遂行することを分ける&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Googleドメインの設定</title><link>https://dyuji.dev/blog/memo/2020_1130_domain/</link><pubDate>Mon, 30 Nov 2020 11:15:29 +0900</pubDate><guid>https://dyuji.dev/blog/memo/2020_1130_domain/</guid><description>&lt;p>&lt;a href="https://domains.google/intl/ja_jp/">Google Domain&lt;/a>にてドメインを購入しました。
購入にあたってKyashは使えませんでした。
昔、Github Pages用に作ったリポジトリを転用しています。
Githubのsettingから購入したドメインを設定し、GoogleDomain側からもレコードを設定しました。
レコードの反映は思ったより早かったです。
細かい見た目とかはおいおいやるとして、とりあえずmarkdownで記録を残そうと思います。&lt;/p></description></item></channel></rss>